<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>boss_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>140</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WHEN BOSS START

image_speed = 0;
placement = 0;
wobb = 0;
a_angle = 90;
a_shoot = 0;
timer1 = 0;
timer2 = 0;
timer3 = 0;
attack = 0;
action = 0;
damage = 0;
flash = 0;
maxhit = 6/(1+5*machine.game_cheat);
if maxhit &lt; 1
    maxhit = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BOSS

//Animation
if wobb
{   if abs(image_speed) == 0
    {   wobb++;
        if wobb &gt;= room_speed*1.3
        {   if image_index == 5
                image_speed = -10/room_speed;
            else
                image_index++;
            wobb = 1;
        }
    }
    else if image_index &lt;= 2
    {   image_speed *= -1;
        if !floor(image_index)
            image_index = image_number - 1;
        else
            image_index = 3;
    }
}

switch machine.game_boss
{   //Leg stage
    case 2: //Go up or down
            if !wobb for (var i=0;i&lt;=2;i++)
            {   switch i
                {   case 0: var j = lgrip;
                            var k = !wobb;
                            break;
                    case 1: j = rgrip;
                            k = !wobb;
                            break;
                    case 2: j = id;
                            k = !(lgrip.wobb and rgrip.wobb);
                            break;
                }
                with j if k
                {   y += 50 * sign(room_height*(0.15+0.6*other.placement) - y);
                    if i != 2
                    {   if other.placement
                        {   if y &gt;= room_height*(0.15+0.6*other.placement)
                                wobb = 1;
                        }
                        else if y &lt;= room_height*(0.15+0.6*other.placement)
                            wobb = 1;
                    }
                    else if attack
                    {   dbeam.x = x;
                        dbeam.y = y+256;
                    }
                }
                else if i == 2
                {   wobb = 1;
                    with dbeam instance_destroy();
                }
            }
            //Attack
            else if abs(image_speed) &gt; 0
            {   if !timer1 and !timer2//Wait
                {   wobb++;
                    if instance_exists(machine.me)
                        a_shoot = 20*(1 + min((a_angle-90)/90,1) - max((a_angle-90)/90,1))
                                + point_direction(x,y,machine.me.x,machine.me.y);
                    a_angle += 3;
                    if a_angle &gt;= 360
                        a_angle -= 360;
                    if !(wobb%(room_speed/3))
                    {   lgrip.y = clamp(y+irandom_range(-15,15),
                                        room_height*(0.1+0.6*placement),
                                        room_height*(0.2+0.6*placement));
                        rgrip.y = clamp(y+irandom_range(-15,15),
                                        room_height*(0.1+0.6*placement),
                                        room_height*(0.2+0.6*placement));
                    }
                    if !(wobb%room_speed)
                    {   if random(1) &lt; damage/9//Waste falldown
                        with instance_create(irandom_range(room_width*0.2,room_width*0.8),
                                             room_height*-0.2,waste)
                        {   image_xscale = 3;
                            image_yscale = 3;
                            gravity = 0.05;
                            shot = 0;
                            with instance_create(x,0,warning)
                            {   timer = 2;
                                image_blend = c_green;
                            }
                        }
                        if irandom(100) &lt; wobb/room_speed//Death beam prepare
                            timer1 = 1;
                        else if irandom(100) &lt; 40//Straight shot prepare
                        {   timer1 = 1.5;
                            attack = 3;
                            action = 1;
                        }
                        else if irandom(100) &lt; 8//Random shot prepare
                        {   timer1 = 0.8;
                            attack = 4;
                            action = 2;
                            att = ds_queue_create();
                        }
                    }
                }
                else switch action
                {   case 0: if timer2//Death beam attack
                            {   timer2 -= 1/room_speed;
                                if !timer2
                                {   wobb = 0;
                                    lgrip.wobb = 0;
                                    rgrip.wobb = 0;
                                    placement ^= 1;
                                    attack = 1;
                                    with instance_create(x,y+256,dbeam)
                                    {   image_xscale = (2*!(other.a_shoot%360)-1)*room_width;
                                        image_yscale = 512;
                                        image_alpha = 0.75;
                                        image_blend = c_aqua;
                                    }
                                }
                            }
                            else
                            {   if timer1 == 1
                                    timer1--;
                                timer1 += 720/room_speed;
                                a_shoot = timer1;
                                if !(timer1%180) and (irandom(100)&lt;timer1/90)
                                {   timer1 = 0;
                                    timer2 = 3;
                                }
                            }
                            break;
                    case 1: if timer2//Straight shot attack
                            {   timer2 -= 1/room_speed;
                                if !timer2
                                {   attack--;
                                    with instance_create(x,y,bullet)
                                        motion_add(other.a_shoot,80);
                                    if attack
                                        timer2 = 0.7;
                                    else
                                        action = 0;
                                }
                            }
                            else
                            {   timer1 -= 1/room_speed;
                                if !timer1
                                    timer2 = 0.7;
                            }
                            break;
                    case 2: if timer2//Random shot attack
                            {   timer2 -= 1/room_speed;
                                if !timer2
                                {   var a = ds_queue_dequeue(att);
                                    a_shoot = 270 - 180*placement;
                                    with instance_create(x,y,bullet)
                                        motion_add(point_direction(x,y,a[0],a[1]),80);
                                    if !ds_queue_empty(att)
                                        timer2 = 1;
                                    else
                                    {   action = 0;
                                        ds_queue_destroy(att);
                                    }
                                }
                            }
                            else
                            {   timer1 -= 1/room_speed;
                                if !timer1
                                {   attack--;
                                    var a;
                                    a[1] = irandom_range(room_height*0.3,room_height*0.6);
                                    a[0] = irandom_range(room_width*0.1,room_width*0.9);
                                    ds_queue_enqueue(att,a);
                                    a_shoot = point_direction(x,y,a[0],a[1]);
                                    with instance_create(a[0],a[1],warning)
                                    {   timer = 1.5;
                                        sprite_index = target_spr;
                                        image_xscale = 2;
                                        image_yscale = 2;
                                    }
                                    if attack
                                        timer1 = 0.8;
                                    else
                                        timer2 = 1;
                                }
                            }
                            break;
                }
            }
            //Two spring movement
            var aspd1 = 0.011*point_distance(lgrip.x,lgrip.y,x,y);
            var adir1 = point_direction(lgrip.x,lgrip.y,x,y);
            var aspd2 = 0.009*point_distance(rgrip.x,rgrip.y,x,y);
            var adir2 = point_direction(rgrip.x,rgrip.y,x,y);
            hspeed -= aspd1*dcos(adir1) + aspd2*dcos(adir2);
            vspeed += aspd1*dsin(adir1) + aspd2*dsin(adir2);
            if damage &gt;= maxhit//STAGE FINISH
            {   damage = 0;
                timer1 = 0;
                timer2 = 0;
                flash = 0;
                hspeed = choose(-5,5);
                vspeed = 0;
                gravity = 0.2;
                machine.game_boss++;
                with dbeam instance_destroy();
                with rgrip instance_destroy();
            }
            break;
    //Fall stage
    case 3: wobb++;
            if !(wobb%room_speed)//Waste falldown
            {   with instance_create(irandom_range(room_width*0.05,room_width*0.95),
                                     room_height*-0.2,waste)
                {   image_xscale = 3;
                    image_yscale = 3;
                    gravity = 0.05;
                    shot = 0;
                    with instance_create(x,0,warning)
                    {   timer = 2;
                        image_blend = c_green;
                    }
                }
            }
            var hit = XY_COLLISION(side_wall,1);
            if hit[0]
                hspeed *= -1;
            hit = XY_COLLISION(bot_wall,2);
            if hit[0]
            {   hspeed = irandom_range(-5,5);
                vspeed = min(-vspeed,-5);
                with instance_create(x,y-512,warning)
                {   timer = 2;
                    sprite_index = attacking_spr;
                    image_xscale = 2;
                    image_yscale = 2;
                }
            }
            if damage &gt;= maxhit//STAGE FINISH
            {   if gravity != 0
                {   gravity = 0;
                    y = room_height*0.9;
                }
                y -= 3;
                if y &lt;= lgrip.y
                {   machine.game_boss++;
                    wobb = 3;
                    placement = 0;
                    damage = 0;
                    action = 0;
                    attack = 0;
                    speed = 0;
                }
            }
            break;
    //Ram stage
    case 4: if !timer1 and !timer2//Wait up and down
            {   if damage &gt;= maxhit//END BOSS
                {   wobb = 3;
                    action = -1;
                    image_index = 2;
                    gravity = 0.2;
                    with lgrip instance_destroy();
                    hit = XY_COLLISION(bot_wall,2);
                    if hit[0]
                    {   instance_destroy();
                        machine.game_finish = date_current_datetime();
                        machine.game_state += 2;
                    }
                }
                else
                {   x = room_width*(0.5 + 0.38*(1 + min((wobb-90)/90,1) - max((wobb-90)/90,1)));
                    y += 12 * sign(room_height*(0.15+0.6*placement) - y);
                    lgrip.y = y;
                    if placement
                    {   if y &gt;= room_height*(0.15+0.6*placement)
                            placement = 0;
                    }
                    else if y &lt;= room_height*(0.15+0.6*placement)
                        placement = 1;
                    wobb += 3;
                    a_shoot = wobb;
                    if !timer3//Spin shot
                    and collision_line(x,y,x+dcos(a_shoot)*10000,y-dsin(a_shoot)*10000,jumper,false,false)
                    {   with instance_create(x,y,bullet)
                            motion_add(other.a_shoot,20);
                        timer3 = 2;
                    }
                    else
                        timer3 -= 1/room_speed;
                    if wobb &gt;= 360
                    {   wobb -= 360;
                        attack++;
                    }
                    else if !((wobb+90)%180) and (irandom(100)&lt;10+2*attack)//Ram prepare
                    {   timer1 = 4;
                        timer3 = 1;
                        attack = 0;
                    }
                }
            }
            else//Ram attack
            {   if timer2
                {   timer2 -= 1/room_speed;
                    if !action
                        hspeed += hspeed/12;
                    var hit = XY_COLLISION(side_wall,1);
                    if hit[0]
                    {   speed = 0;
                        action = 1;
                        move_towards_point(room_width/2,lgrip.y,2);
                        repeat (6 + 2*damage)
                        with instance_create(irandom_range(room_width*0.05,room_width*0.95),
                                             room_height*-0.2,waste)
                        {   image_xscale = 3;
                            image_yscale = 3;
                            gravity = 0.05 + random(0.2);
                            shot = 0;
                            with instance_create(x,0,warning)
                            {   timer = 2;
                                image_blend = c_green;
                            }
                        }
                        with instance_create(x+512*power(-1,!(x&lt;room_width/2)),y,warning)
                        {   timer = 3;
                            sprite_index = attacking_spr;
                            image_xscale = 2;
                            image_yscale = 2;
                        }
                    }
                    if !timer2
                    {   action--;
                        speed = 0;
                        y = lgrip.y;
                    }
                }
                else if instance_exists(machine.me)
                {   timer1 -= 1/room_speed;
                    if !timer1
                    {   timer2 = 8;
                        hspeed = 1 * sign(machine.me.x-x);
                        if hspeed == 0
                            hspeed = 1;
                    }
                    else
                    {   vspeed = 4 * sign(machine.me.y-y);
                        lgrip.y = y;
                    }
                }
            }
            break;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LIMBS AND LASER

draw_self();
if machine.game_boss &gt;= 2
{   if instance_exists(lgrip)
    {   draw_line_width_color(x-192,y,lgrip.x+192,lgrip.y,10,c_olive,c_olive);
        draw_line_width_color(x-192,y+64,lgrip.x+192,lgrip.y+96,20,c_olive,c_olive);
        draw_line_width_color(x-192,y-64,lgrip.x+192,lgrip.y-96,20,c_olive,c_olive);
    }
    if instance_exists(rgrip)
    {   draw_line_width_color(x+192,y,rgrip.x-192,rgrip.y,10,c_olive,c_maroon);
        draw_line_width_color(x+192,y+64,rgrip.x-192,rgrip.y+96,20,c_olive,c_maroon);
        draw_line_width_color(x+192,y-64,rgrip.x-192,rgrip.y-96,20,c_olive,c_maroon);
        rgrip.image_blend = -1;
    }
    if flash
    {   if machine.game_boss == 2
            rgrip.image_blend = merge_color(-1,c_green,flash%2);
        else
            image_blend = merge_color(-1,c_red,flash%2);
        flash--;
    }
    else
        image_blend = -1;
    if abs(image_speed)&gt;0 and (machine.game_boss!=3)
    and !(machine.game_boss==4 and timer3) and (action!=-1)
    {   draw_set_alpha(0.75);
        draw_line_width_color(x,y,x+dcos(a_shoot)*10000,y-dsin(a_shoot)*10000,5+35*!!timer1,c_maroon,c_maroon);
        draw_set_alpha(1);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
