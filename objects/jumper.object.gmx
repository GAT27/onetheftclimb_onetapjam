<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>jumper_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATS

image_speed = 0;
walled = -1;
a_angle = 135;
a_jump = 0;
ggrav = 0.16;

mutagen[6] = 0;//0RGBCMY
factor = 0.79;
resist = 0;
stun = 0;
tumble = 0;
invulnr = 0;
attack = 1;
trail = 0;
ghost = -2;

sprite_set_offset(sprite_index,
                  sprite_width/2,sprite_height/2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MUTAGAN PLAYER

var i,j,hit,hits;
if ghost == -2//Self
{   //Looks
    if machine.game_state == 3
        trail++;
    if machine.game_state &gt;= 2
        image_index = 0;
    else
        image_index = 1;
    if mutagen[5]
        image_blend = c_fuchsia;
    else if mutagen[6]
        image_blend = c_yellow;
    else if mutagen[3]
        image_blend = c_blue;
    else
        image_blend = -1;
    if mutagen[2]
        image_blend = merge_color(image_blend,c_lime,
                                  (1+dsin(360*(trail%room_speed)/room_speed))/2);
    invulnr = max(invulnr-1,0);
    if mutagen[4]
        image_alpha = 0.25;
    else if invulnr
        image_blend = merge_color(-1,c_black,invulnr%2);
    else
        image_alpha = 1;
    //if one_h
        //part_particles_create(looks,x,y,lp[0],5);
    //part_particles_create(looks,x,y,lp[0],1);
    
    //Movement
    a_jump = 55*(1 + min((a_angle-90)/90,1) - max((a_angle-90)/90,1));
    if !tumble and (tumble!=-2)
    {   //Aerial action
        if one_p and !mutagen[5]
        {   if attack and (walled==0)
            {   with instance_create(x+hspeed*2,y+vspeed*2,collider)
                {   x -= 128 * (1+3*!!other.mutagen[6]);
                    y -= 128 * (1+3*!!other.mutagen[6]);
                    hspeed = other.hspeed;
                    vspeed = other.vspeed;
                    image_xscale = 256 * (1+3*!!other.mutagen[6]);
                    image_yscale = 256 * (1+3*!!other.mutagen[6]);
                    if (machine.game_boss==3)
                    or (machine.game_boss==4 and boss.action)
                    {   hits[3] = XY_COLLISION(boss,0);
                        hit[0] = 0;
                        hits[2] = hit;
                    }
                    if other.mutagen[3]
                        hits[2] = XY_COLLISION(bullet,0);
                    hits[1] = XY_COLLISION(turret,0);
                    hits[0] = XY_COLLISION(waste,0);
                    var hitt = 0;
                    for (i=0;i&lt;array_length_1d(hits);i++)
                    {   hit = hits[i];
                        if hit[0]
                        {   hitt |= 1;
                            switch i
                            {   case 0: for (j=1;j&lt;array_length_1d(hit);j++)
                                        with hit[j]
                                        {   hspeed = 20*sign(other.hspeed);
                                            vspeed = other.vspeed;
                                            shot = 1;
                                        }
                                        break;
                                case 1: with hit[1] damage++;
                                        break;
                                case 2: for (j=1;j&lt;array_length_1d(hit);j++)
                                        with hit[j]
                                            instance_destroy();
                                        break;
                                case 3: hitt |= 2;
                                        with hit[1]
                                        {   damage++;
                                            if machine.game_boss == 4
                                                timer2 = 1.1;
                                        }
                                        break;
                            }
                        }
                    }
                    if other.mutagen[6]
                        other.attack = 0;
                    else if !other.mutagen[3]
                    {   if (hitt&gt;=2) and (machine.game_boss==3)
                            other.vspeed *= -1;
                        else if hitt
                        {   other.hspeed *= -1;
                            other.image_xscale *= -1;
                        }
                        else
                            other.attack = 0;
                    }
                    else
                    {   other.hspeed = 0;
                        other.vspeed = 0;
                        other.image_xscale *= -1;
                        other.walled = -sign(hspeed);
                    }
                }
            }
            if mutagen[6]
                vspeed = -20;
        }
        //Jumping
        if (walled!=0)
        and ((one_h and !mutagen[3]) or (one_r and mutagen[3]))
        {   hspeed = dcos(a_jump)*walled*50
                   * (1-0.5*!!mutagen[3]) * (1+3*!!mutagen[4]);
            vspeed = -dsin(a_jump)*50
                   * (1-0.5*!!mutagen[3]) * (1+3*!!mutagen[4]);
            walled = 0;
        }
        //Physics
        hits[7] = XY_COLLISION(dbeam,2);
        hits[6] = XY_COLLISION(boss,0);
        hits[5] = XY_COLLISION(bullet,0);
        hits[4] = XY_COLLISION(turret,0);
        hits[3] = XY_COLLISION(hotjunk,0);
        hits[2] = XY_COLLISION(jumper,0);
        hits[1] = XY_COLLISION(gunk,0);
        hits[0] = XY_COLLISION(waste,0);
        if (walled==0) or mutagen[3]
        {   i = XY_COLLISION(side_wall,1);
            if i[0]//Wall collision
            {   walled = -sign(hspeed);
                if !mutagen[5] and !mutagen[6]
                {   hspeed = 0;
                    vspeed = 0;
                    attack = 1;
                    image_xscale = walled;
                }
                else
                {   hspeed *= -1;
                    image_xscale = walled;
                    walled = 0;
                }
            }
            else//Gravity and trails
            {   vspeed += ggrav
                        * (1-0.5*!!mutagen[2]) * (1+0.5*!!mutagen[3])
                        * !mutagen[4] * (1+2*!!mutagen[6]);
                if !(!mutagen[1] and mutagen[5])
                and !(trail%(4 + !!mutagen[1] + 3*!!mutagen[2] + !!mutagen[3]
                - 2*!!mutagen[4] + 3*!!mutagen[5] + 15*!!mutagen[6]))
                with instance_create(x,y,jumper)
                {   image_xscale = other.image_xscale;
                    if !other.mutagen[1]
                        ghost = 1;
                    else
                        ghost = 3;
                    mutagen = other.mutagen;
                }
            }
            if one_h and mutagen[3]
            {   a_angle += 7;
                if a_angle &gt;= 360
                    a_angle -= 360;
            }
        }
        else
        {   a_angle += 7;
            if a_angle &gt;= 360
                a_angle -= 360;
        }
    }
    //Tumble escape
    else
    {   vspeed += ggrav;
        if abs(hspeed)
            image_angle -= 6 * sign(hspeed) * max(abs(hspeed/10),1);
        else
            image_angle -= 6;
        image_index = 1;
        hits[7] = XY_COLLISION(dbeam,2);
        hits[6] = XY_COLLISION(boss,0);
        hits[5] = XY_COLLISION(bullet,0);
        hits[4] = XY_COLLISION(turret,0);
        hits[3] = XY_COLLISION(hotjunk,0);
        hits[2] = XY_COLLISION(jumper,0);
        hits[1] = XY_COLLISION(gunk,0);
        hits[0] = XY_COLLISION(waste,0);
        i = XY_COLLISION(side_wall,1);
        if i[0]
            hspeed *= -1;
        if one_p and (tumble!=-2)
        {   tumble--;
            if !tumble
            {   if walled == -1
                    hspeed = -20;
                else
                {   hspeed = 20*sign(hspeed);
                    if hspeed == 0
                        hspeed = 20;
                }
                vspeed = -10;
                image_xscale = sign(hspeed);
                image_angle = 0;
                attack = 1;
            }
        }
    }
    
    //Top and bottom check
    i = XY_COLLISION(top_wall,2);
    if i[0]
    {   if !mutagen[5]
            vspeed = 0;
        else
            vspeed *= -1;
    }
    i = XY_COLLISION(bot_wall,2);
    if i[0]
    {   if tumble//DEATH
            tumble = -2;
        else if mutagen[5]
            vspeed *= -1;
        else
        {   tumble = -1;
            x += walled*64;
            y -= 64;
            a_angle = 100;
            if walled == 0
            {   hspeed /= 4;
                vspeed *= -0.6;
            }
            else
            {   hspeed = 10*walled;
                vspeed = -20;
            }
        }
    }
    
    //Mutagen
    if !invulnr
    {   resist = -100*!!mutagen[1]*(1-0.7*!!mutagen[2]) + 150*!!mutagen[2]
               + 80*!!mutagen[4]*(1+0.8*!!mutagen[1])*(1-0.7*!!mutagen[2])
               + 100*!!mutagen[6];
        factor = clamp(factor,0.79,0.96);
        hit = hits[0];//Waste hit
        if hit[0]
        {   if tumble//DEATH
                tumble = -2;
            else for (i=1;i&lt;array_length_1d(hit);i++)
            {   if hit[i].shot
                    continue;
                with hit[i] instance_destroy();
                if (irandom(100)&lt;mutagen[0]*factor) and !mutagen[6]
                {   //Choose mutagen
                    if !mutagen[5]
                    {   var m = choose(1,1,2,2,2,3,3,4,4,5,5,6);
                        mutagen[m] = 11;
                    }
                    else
                    {   var m = 5;
                        mutagen[m] = 1000;
                    }
                    //Recovery when green (not on 1st get)
                    if mutagen[2]
                    {   if !mutagen[5]
                            mutagen[0] += 30 * (1-resist/100);
                        else
                            mutagen[0] += 5;
                    }
                    //Clone creation when magenta
                    if m == 5
                    {   with instance_create(x,y,jumper)
                        {   mutagen[0] = other.mutagen[0];
                            for (j=1;j&lt;6;j++)
                                mutagen[j] = 1000*other.mutagen[j];
                            if other.walled == 0
                            {   hspeed = -other.hspeed * random_range(0.5,1.5);
                                vspeed = other.vspeed * random_range(0.5,1.5);
                            }
                            else
                            {   hspeed = dcos(other.a_jump)*other.walled*50
                                       * (1-0.5*!!other.mutagen[3]) * (1+3*!!other.mutagen[4]);
                                vspeed = -dsin(other.a_jump)*50
                                       * (1-0.5*!!mutagen[3]) * (1+3*!!mutagen[4]);
                            }
                            x += sign(hspeed)*sprite_width;
                            image_xscale = sign(hspeed);
                            walled = 0;
                            ggrav = 0;
                        }
                        mutagen[0] /= 2;
                        if mutagen[5] != 1000
                            mutagen[5] = 0;
                    }
                    //Purge when yellow
                    if m == 6
                    {   for(j=1;j&lt;6;j++)
                            mutagen[j] = 0;
                        hspeed = sign(hspeed)*15;
                        factor -= 0.06;
                    }
                    else
                        factor += 0.02;
                }
                else//Toxic damage
                {   if !mutagen[5]
                        mutagen[0] += 30 * (1-resist/100);
                    else if mutagen[2]
                        mutagen[0] += 5;
                }
            }
        }
        hit = hits[1];//Gunk hit
        if hit[0] and (walled!=0)
        {   if mutagen[2]
                with hit[1] instance_destroy();
            else if !mutagen[3]
            {   hspeed = dcos(a_jump)*walled*50
                       * (1-0.5*!!mutagen[3]) * (1+3*!!mutagen[4]);
                vspeed = -dsin(a_jump)*50
                       * (1-0.5*!!mutagen[3]) * (1+3*!!mutagen[4]);
                walled = 0;
            }
            mutagen[0] = min(mutagen[0]+30*(1-resist/100),99);
        }
        hit = hits[2];//Clone hit
        if hit[0] and (id=machine.me) and (hit[1].ghost==-2)
        {   if !mutagen[6]
            {   hspeed /= 2;
                mutagen[0] += hit[1].mutagen[0] * (1-resist/100);
            }
            with hit[1] instance_destroy();
        }
        hit = hits[3];//Hotjunk hit
        if hit[0]
        {   if tumble//DEATH
                tumble = -2;
            else if mutagen[5]
                instance_destroy();
            else if mutagen[6]
                with hit[1] instance_destroy();
            else
            {   tumble = -1;
                hspeed /= -2;
                vspeed = -10;
            }
        }
        hit = hits[4];//Turret hit
        if hit[0]
        {   if tumble//DEATH
                tumble = -2;
            else if mutagen[4] or mutagen[6]
                with hit[1] instance_destroy();
            else if mutagen[5]
                instance_destroy();
            else
            {   tumble = -1;
                hspeed /= -2;
                vspeed = -10;
            }
        }
        hit = hits[5];//Bullet hit
        if hit[0]
        {   if !mutagen[6]
            {   tumble = -1;
                hspeed /= 2;
                vspeed /= 2;
            }
            with hit[1] instance_destroy();
        }
        hit = hits[6];//Boss hit
        if hit[0]
        {   if tumble//DEATH
                tumble = -2;
            else if mutagen[5]
                instance_destroy();
            else 
            {   tumble = -1;
                if machine.game_boss == 4
                {   hspeed = 0;
                    vspeed = -1;
                }
                else
                {   hspeed *= -1.5;
                    vspeed = -20;
                }
            }
        }
    }
    hit = hits[7];//Dbeam hit
    if hit[0]
        tumble = -2//DEATH INSTANT
    //Lower toxic
    for (i=0;i&lt;=6;i++)
    {   if !i
            mutagen[i] = max(mutagen[i]-(2 - 5*!!mutagen[2] + 6*!!mutagen[5]
                                         + 2*!!mutagen[6])/room_speed,0);
        else
            mutagen[i] = max(mutagen[i]-1/room_speed,0);
    }
    //Clone destroy
    if !mutagen[0] and mutagen[5]
        instance_destroy();
    
    //Stun, tumble, and death trigger
    stun = max(stun-(50-mutagen[0])/25/room_speed,0);
    if (mutagen[0]&gt;=100) and !mutagen[5]
    {   tumble = -1;
        mutagen[0] = 50;
        hspeed /= -2;
        vspeed /= 2;
    }
    if tumble == -1
    {   stun += 15;
        tumble = floor(stun/10);
        invulnr = room_speed;
        for (i=1;i&lt;=6;i++)
            mutagen[i] = 0;
    }
    else if tumble == -2
    {   hspeed *= 0.95;
        vspeed = -2;
        image_angle += 666;
        image_index = 1;
        invulnr += 2;
        if invulnr &gt;= room_speed
        {   instance_destroy();
            machine.game_state++;
        }
    }
}

else//Ghost
{   if mutagen[1]
    {   hit = XY_COLLISION(waste,0);
        if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
            with hit[i] instance_destroy();
        hit = XY_COLLISION(turret,0);
        if hit[0] with hit[1]
             instance_destroy();
        gravity = -0.2;
        image_blend = c_red;
    }
    else if mutagen[4]
        image_blend = c_aqua;
    else
        image_blend = merge_color(c_dkgray,c_white,ghost);
    image_alpha = ghost;
    if ghost &lt;= 0
        instance_destroy();
    else
        ghost -= 3/room_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUIDE ARROW

draw_self();
if (ghost==-2) and !mutagen[5]
{   draw_arrow(x,y,x+dcos(a_jump)*walled*250,y-dsin(a_jump)*250,50);
    //draw_line(x,y,x+dcos(55)*walled*50,y-dsin(55)*50);
    //draw_line(x,y,x+dcos(-55)*walled*50,y-dsin(-55)*50);
    //draw_rectangle_color(bbox_left,bbox_top,bbox_right,bbox_bottom,
      //                   c_red,c_red,c_red,c_red,true);
}
//if mutagen[5]
  //  draw_text_transformed(x,y-64,mutagen[0],6,6,0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
