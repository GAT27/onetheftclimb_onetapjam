<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SETUP

device_mouse_dbclick_enable(false);
//draw_enable_alphablend(false);
application_surface_enable(true);//???????????????????
//show_debug_overlay(true);
draw_set_font(fgothic);
randomize();

//globalvar looks;
//globalvar lp;
globalvar one_p;
globalvar one_h;
globalvar one_r;
one_p = 0;
one_h = 0;
one_r = 0;

game_state = 0;
game_select = 0;
game_story = 0;
game_bottom = noone;
game_start = 0;
game_finish = 0;
game_boss = 0;
game_cheat = 0;
game_lose = "";

hbeat = 0;
wait = 0;
rate = 1;
pwin = 3000;
points = 0;
health = 100;

var w = min(display_get_width(),display_get_height());
var h = max(display_get_height(),display_get_width());
if os_type != os_android
{   var r = w/h;
    h = w*0.95;
    w *= r*0.95;
    window_set_size(w,h);
    display_reset(2,false);
}
surface_resize(application_surface,w,h);//????????????????
application_surface_enable(false);//????
view_wport[0] = w;
view_hport[0] = h;

me = instance_create(room_width/2,room_height*0.98,jumper);
if room == title_screen
{   with me instance_destroy();
    lives = 0;
    /*looks = part_system_create();
    lp[0] = part_type_create();*/
    /*part_type_shape(lp[0],pt_shape_square);
    part_type_size(lp[0],0.5,0.5,-0.02,0);
    //part_type_scale(global.p1, 1, 1);
    //part_type_alpha2(global.p1, 1, 0);
    part_type_speed(lp[0],5,10,0,0);
    part_type_direction(lp[0],60,120,0,0);
    part_type_gravity(lp[0],0.2,270);
    //part_type_orientation(global.p1, 0, 0, 0, 0, 1);
    part_type_color_mix(lp[0],c_red,c_orange);
    part_type_blend(lp[0],true);
    part_type_life(lp[0],room_speed,room_speed*3);*/
    /*part_type_shape(lp[0],pt_shape_line);
    part_type_size(lp[0],1,1,0.02,0);
    //part_type_size(lp[0],0.5,0.5,-0.02,0);
    //part_type_size(lp[0],3,3,0.5,0);
    //part_type_scale(lp[0],1,1)
    part_type_speed(lp[0],5,10,0,0);
    part_type_direction(lp[0],60,120,0,0);
    part_type_gravity(lp[0],0.5,270);
    //part_type_orientation(lp[0],0,0,0,0,1)
    part_type_color_mix(lp[0],c_red,c_orange);
    //part_type_alpha1(lp[0],1)
    part_type_blend(lp[0],false)
    part_type_life(lp[0],room_speed,room_speed*3)*/
}

with instance_create(-1,0,side_wall)
{   image_xscale = 1;
    image_yscale = room_height;
}
with instance_create(room_width,0,side_wall)
{   image_xscale = 1;
    image_yscale = room_height;
}
with instance_create(0,-1,top_wall)
{   image_xscale = room_width;
    image_yscale = 1;
}

with instance_create(-2000,room_height*-0.5,bot_wall)
{   image_xscale = 1000;
    image_yscale = room_height*2;
}
with instance_create(room_width+1000,room_height*-0.5,bot_wall)
{   image_xscale = 1000;
    image_yscale = room_height*2;
}
with instance_create(room_width*-0.5,room_height+1000,bot_wall)
{   image_xscale = room_width*2;
    image_yscale = 1000;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ONE BUTTON

/*one_p = (device_mouse_check_button(0,mb_left) xor keyboard_check(vk_space));
one_h = (device_mouse_check_button_pressed(0,mb_left) xor keyboard_check_pressed(vk_space));
one_r = (device_mouse_check_button_released(0,mb_left) xor keyboard_check_released(vk_space));*/
if os_type == os_android
{   one_p = device_mouse_check_button_pressed(0,mb_left);
    one_h = device_mouse_check_button(0,mb_left);
    one_r = device_mouse_check_button_released(0,mb_left);
}
else
{   one_p = keyboard_check_pressed(vk_space);
    one_h = keyboard_check(vk_space);
    one_r = keyboard_check_released(vk_space);
}
//Skip to boss debug
if debug_mode
{   if string_count("boss",keyboard_string)
    {   game_cheat = 1;
        rate = 2;
        points = pwin;
        with instance_create(x,room_height,spawner)
            sprite_set_offset(sprite_index,0,1);
    }
    else if string_count("last",keyboard_string)
    {   game_cheat = 2;
        rate = 2;
        points = pwin;
        with instance_create(x,room_height,spawner)
            sprite_set_offset(sprite_index,0,1);
    }
    if string_length(keyboard_string) &gt; 4
        keyboard_string = string_copy(keyboard_string,2,5);
}

switch game_state
{   //Intro start
    case 0: if room == main_screen//Main
            {   background_xscale[0] = 2;
                background_yscale[0] = 2;
                if !game_select
                {   for (var i=0;i&lt;=2;i++) repeat 3
                    with instance_create(irandom_range(room_width*0.2,room_width*0.8),room_height*0.2*(1+i),labcoat)
                    {   hspeed = choose(0.5,-0.5);
                        image_speed = 0;
                        timer = -1;
                        with instance_create(0,y,rail)
                        {   image_xscale = room_width;
                            image_yscale = 16;
                            image_blend = c_dkgray;
                        }
                    }
                    game_bottom = instance_create(0,room_height,bot_wall);
                    with game_bottom
                    {   sprite_index = machine_spr;
                        image_speed = 0.25;
                    }
                    game_select++;
                }
                if one_h
                {   if game_select &lt; 40
                        game_select += 1;
                }
                else
                    game_select = 1;
                if one_r and (game_story&lt;6)
                    game_story++;
                if game_select &gt;= 40
                {   game_select = 1;
                    game_state++;
                }
                one_p = 0;
                one_h = 0;
                one_r = 0;
            }
            else//Title
            {   if game_select &gt;= 120
                {   background_x[1] -= 32;
                    background_xscale[1] += 1;
                    background_blend[1] = merge_color(-1,c_black,game_select/210);
                    game_select += 1;
                    if game_select &gt;= 210
                    {   game_select = 210
                        if one_r or !one_h
                        {   //background_delete(background_index[0]);
                            background_delete(background_index[1]);
                            room_goto_next();
                        }
                    }
                }
                else if !background_x[1]
                {   //background_index[0] = background_create_gradient(room_width,room_height,c_navy,c_aqua,1);
                    background_index[1] = background_create_color(64,64,c_dkgray);
                    background_x[1] = room_width*0.25;
                    background_y[1] = room_height-64;
                    background_xscale[1] = room_width/128;
                }
                else if one_h and (game_start&gt;room_height*0.25)
                {   if game_select &lt; 120
                        game_select += 1;
                }
                else
                    game_select = 0;
                
                var wspeed = (1+game_select/8) * (2 + one_h*4);
                background_vspeed[1] = -wspeed;
                game_start += wspeed;
                background_yscale[1] = 1 + game_start/64;
                wait = max(wait-wspeed,0);
                if !wait and (random(1)&lt;=wspeed/200)
                {   if random(1) &lt; 0.3
                        instance_create(irandom_range(room_width*0.3,room_width*0.7),room_height*1.1,waste);
                    else if random(1) &lt; 0.1
                        instance_create(irandom_range(room_width*0.3,room_width*0.7),room_height*1.1,hotjunk);
                    else
                        instance_create(irandom_range(room_width*0.3,room_width*0.7),room_height*1.1,labcoat);
                    wait = 192;
                }
                with labcoat
                {   y -= wspeed;
                    image_blend = merge_color(-1,c_black,other.game_select/210);
                    image_speed = 0;
                    image_xscale = 0.5;
                    image_yscale = 0.5;
                }
                with waste
                {   y -= wspeed;
                    image_blend = merge_color(-1,c_black,other.game_select/210);
                }
                with hotjunk
                {   y -= wspeed;
                    image_blend = merge_color(-1,c_black,other.game_select/210);
                    image_speed = 0.1;
                    image_xscale = 0.5;
                    image_yscale = 0.5;
                }
            }
            break;
    //Machine rise
    case 1: one_p = 0;
            one_h = 0;
            one_r = 0;
            game_bottom.y -= 6;
            me.y = game_bottom.y-70;
            if game_bottom.y &lt;= room_height*0.9
            {   game_bottom.y = room_height*0.9;
                me.a_angle = 135;
                me.image_xscale = -1;
                one_h = 1;
                game_state++;
            }
            break;
    //Timer ready
    case 2: one_p = 0;
            one_h = 0;
            one_r = 0;
            if me.walled == 1
            {   game_start = date_current_datetime();
                game_state++;
            }
            break;
    //Main game
    case 3: var i=0,hit,wspeed = rate * (2 + one_h*4);
            wait = max(wait-wspeed,0);
            points = max(points+wspeed*2/room_speed,0);
            background_vspeed[0] = wspeed;
            if health &lt;= 0//DEATH
            {   me.gravity = 2;
                health = 0;
            }
            else
                health = min(health+2/room_speed,100);
            
            //Object controls
            if !wait and !game_boss and (random(1)&lt;=wspeed/200/*0.01*/)
            do with instance_create(irandom_range(room_width*0.2,room_width*0.8),room_height*-0.2,spawner)
            {   image_xscale = room_width*0.05;
                image_yscale = 192;
                image_blend = c_black;
                sprite_set_offset(sprite_index,0,1);
                if !other.wait
                {   if random(1) &lt; 0.1*3*other.points/other.pwin
                    {   with instance_create(x,y,hotjunk)
                            with instance_create(x,0,warning)
                            {   timer = 2;
                                image_xscale = 2;
                                image_yscale = 2;
                                image_blend = c_red;
                            }
                        image_yscale /= 2;
                        instance_destroy();
                        i = 1;
                    }
                    else if random(1) &lt; 0.1*3/2*other.points/other.pwin
                    {   with instance_create(x,y,turret)
                        {   timer = 3*room_speed-1;
                            damage = 0;
                            with instance_create(x,0,warning)
                            {   timer = 2;
                                image_xscale = 2;
                                image_yscale = 2;
                                image_blend = c_aqua;
                            }
                        }
                        image_yscale /= 4;
                        instance_destroy();
                        i = 1;
                    }
                    else with instance_create(0,y+8,rail)
                    {   image_xscale = room_width;
                        image_yscale = 16;
                        image_blend = c_dkgray;
                    }
                }
                other.wait = image_yscale*2;
            }until i or (irandom(100)&lt;50)
            ////
            with jumper
                if walled != 0
                    y += wspeed;
            ////
            with spawner
            {   y += wspeed;
                if y &gt; room_height
                    instance_destroy();
                else if (y&gt;0) and (y&lt;room_height*0.7) and (random(1)&lt;=0.002)
                with instance_create(x,y,labcoat)
                {   hspeed = choose(2,-2);
                    timer = -1;
                }
            }
            ////
            with rail
            {   y += wspeed;
                if y &gt; room_height
                    instance_destroy();
            }
            with labcoat
            {   y += wspeed;
                image_blend = -1;
                image_speed = 0.05;
                image_xscale = -sign(hspeed);
                if image_index == 2
                    image_index = 0;
                hit = XY_COLLISION(other.game_bottom,2);
                if hit[0]
                {   other.points += 10;
                    other.rate += 0.02;
                    instance_destroy();
                }
                else if (x&lt;0) or (x&gt;room_width)
                    instance_destroy();
                else if timer == -1
                {   if (x&gt;room_width*0.1) and (x&lt;room_width*0.9)
                    and (y&lt;room_height*0.7) and (random(1)&lt;=0.002)
                        timer = 3;
                }
                else if timer != -2
                {   timer -= 1/room_speed;
                    image_blend = c_orange;
                    if !timer
                    {   if instance_number(waste) &lt; 4
                        with instance_create(x,y,waste)
                        {   hspeed = random_range(-10,10);
                            vspeed = random_range(-12,-5);
                            image_xscale = 3;
                            image_yscale = 3;
                            gravity = 0.05;
                            shot = 0;
                        }
                        timer = -2;
                    }
                }
            }
            ////
            with waste
            {   if !machine.game_boss
                {   hit = XY_COLLISION(top_wall,2);
                    if hit[0]
                        vspeed *= -1;
                }
                hit = XY_COLLISION(side_wall,1);
                if hit[0]
                {   if !shot
                        hspeed *= -1;
                    else
                    {   instance_create(hit[1].x,y,gunk);
                        instance_destroy();
                    }
                }
                hit = XY_COLLISION(other.game_bottom,2);
                if hit[0]
                {   if !(machine.game_boss or shot)
                    {   health -= 20;
                        other.points -= 100;
                        other.rate = max(other.rate-0.5,1);
                    }
                    instance_destroy();
                }
                
                if shot
                {   image_blend = c_orange;
                    hit = XY_COLLISION(waste,0);
                    if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] instance_destroy();
                    hit = XY_COLLISION(jumper,0);
                    if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] if hit[i] != machine.me
                            instance_destroy();
                    hit = XY_COLLISION(hotjunk,0);
                    if hit[0] with hit[1]
                        instance_destroy();
                    hit = XY_COLLISION(turret,0);
                    if hit[0] with hit[1]
                        instance_destroy();
                }
            }
            ////
            with gunk
            {   y += wspeed;
                image_xscale = 3;
                image_speed = 0.1;
                hit = XY_COLLISION(other.game_bottom,2);
                if hit[0]
                {   other.points += 5;
                    instance_destroy();
                }
                hit = XY_COLLISION(rgrip,2);
                if hit[0] and boss.placement and hit[1].wobb
                {   instance_deactivate_region(x-64,y-room_height*0.25,
                                               128,room_height*0.5,false,true);
                    with gunk instance_destroy();
                    instance_activate_all();
                    boss.damage++;
                    boss.flash = room_speed;
                }
                hit = XY_COLLISION(dbeam,2);
                if hit[0]
                    instance_destroy();
            }
            ////
            with hotjunk
            {   y += wspeed;
                image_speed = 0.1;
                hit = XY_COLLISION(other.game_bottom,2);
                if hit[0]
                {   other.points += 50;
                    other.rate += 0.2;
                    instance_destroy();
                }
            }
            ////
            with turret
            {   y += wspeed;
                timer--;
                if damage &gt;= 2
                    gravity = 0.2;
                else if timer == 0
                with instance_create(x,y,bullet)
                    motion_add(point_direction(x,y,machine.me.x,machine.me.y),20);
                else if timer &lt;= -room_speed
                    timer = 3*room_speed-1;
                hit = XY_COLLISION(other.game_bottom,2);
                if hit[0]
                {   other.points += 50;
                    instance_destroy();
                }
            }
            ////
            with bullet
            {   if (y&lt;0) or (y&gt;room_height)
                    instance_destroy();
                hit = XY_COLLISION(side_wall,1);
                if hit[0]
                {   instance_create(hit[1].x,y,gunk);
                    instance_destroy();
                }
                
                hit = XY_COLLISION(waste,0);
                if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                    with hit[i] instance_destroy();
                hit = XY_COLLISION(jumper,0);
                if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                    with hit[i] if hit[i] != machine.me
                        instance_destroy();
                hit = XY_COLLISION(hotjunk,0);
                if hit[0]
                {   with hit[1] instance_destroy();
                    instance_destroy();
                }
            }
            ////
            with warning
            {   if !timer
                    instance_destroy();
                else
                {   timer -= 1/room_speed;
                    image_alpha = timer/2;
                }
            }
            ////
            if game_boss == 1 with boss
            {   y += wspeed;
                background_blend[0] = c_dkgray;
                if y &gt; room_height*1.5
                {   other.game_boss++;
                    other.rate = 1;
                    image_index++;
                    hspeed = irandom_range(15,30) * choose(1,-1);
                    vspeed = irandom_range(10,15) * choose(1,-1);
                }
                lgrip.y += wspeed;
                rgrip.y += wspeed;
            }
            else
                background_blend[0] = merge_color(-1,c_navy,game_boss/6);
            
            if points &gt;= pwin//BOSS
            {   points = pwin;
                if !game_boss
                {   game_boss++;
                    instance_create(room_width/2,room_height/-2,boss);
                    with instance_create(0,room_height/-2,lgrip)
                        wobb = 0;
                    with instance_create(room_width,room_height/-2,rgrip)
                        wobb = 0;
                    with instance_create(room_width/2,0,warning)
                    {   timer = 3;
                        image_xscale = 4;
                        image_yscale = 4;
                        image_blend = c_yellow;
                    }
                }
            }
            break;
    //Restart death
    case 4: background_vspeed[0] = 0;
            with game_bottom instance_destroy();
            if one_h
            {   if game_select &lt; 40
                    game_select += 1;
            }
            else
                game_select = 0;
            if one_r
            {   room_restart();
                lives = 1-lives;
            }
            if game_select &gt;= 40
                game_end();
            one_p = 0;
            one_h = 0;
            one_r = 0;
            break;
    //Win state
    case 5: var wspeed = 10;
            background_vspeed[0] = wspeed;
            depth = 105;
            me.x = room_width/2;
            me.speed = 0;
            me.ggrav = 0;
            me.trail = 1;
            me.mutagen[0] = 0;
            with gunk instance_destroy();
            if me.y+64 &lt; game_story
            {   me.image_index = 1;
                if me.y+72+wspeed &lt; room_height*0.9
                    me.y += wspeed
                else
                {   wspeed = 0;
                    game_bottom.image_speed = 0;
                    if one_h
                    {   if game_select &lt; 40
                            game_select += 1;
                    }
                    else
                        game_select = 0;
                    if one_r
                        room_restart();
                    if game_select &gt;= 40
                        game_end();
                }
            }
            else
                me.y -= 2;
            game_story += wspeed;
            one_p = 0;
            one_h = 0;
            one_r = 0;
            break;
    //Dying at the end
    default:room_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD

if instance_exists(game_bottom)
{   if game_state//Machine bottom
    {   if instance_exists(me)
        {   var green = me.mutagen[0]/100;
            draw_set_alpha(green);
            draw_rectangle_color(0,0,
                                 room_width*0.05*green,room_height,
                                 c_lime,c_lime,c_lime,c_lime,false);
            draw_rectangle_color(room_width*(1-0.05*green),0,
                                 room_width,room_height,
                                 c_lime,c_lime,c_lime,c_lime,false);
            draw_set_alpha(green/4);
            draw_rectangle_color(room_width*0.05*green,0,
                                 room_width*(1-0.05*green),room_height,
                                 c_lime,c_lime,c_lime,c_lime,false);
        }
        ////
        draw_set_alpha(1);
        draw_rectangle_color(game_bottom.x,game_bottom.y,
                             game_bottom.x+room_width,game_bottom.y+room_height*0.1,
                             c_teal,c_teal,c_teal,c_teal,false);
        if instance_exists(me) and me.tumble
            draw_text_transformed_color(room_width*(0.25+random_range(-0.02,0.02)),room_height*(0.9+random(0.02)),
                                        "MASH",7+random_range(-2,2),7+random_range(-2,2),0,
                                        merge_color(-1,c_red,me.tumble/30),merge_color(-1,c_red,me.tumble/30),
                                        merge_color(-1,c_red,me.tumble/30),merge_color(-1,c_red,me.tumble/30),1);
        ////
        else
        {   hbeat += health/20;
            draw_circle_color(room_width/2,game_bottom.y+room_height*0.043,
                              room_height*(0.025+0.005*dsin(hbeat)),
                              merge_color(c_red,c_lime,health/100),
                              merge_color(c_red,c_lime,health/100),false);
            
            ////
            draw_set_halign(fa_center);
            if game_start &gt; 1
                draw_text_transformed(room_width/2,game_bottom.y+room_height*0.075,
                                      string_replace_all(
                                      string_format(date_second_span(game_start,date_current_datetime()),3,0),' ','0'),
                                      2,2,0);
            ////
            draw_set_halign(fa_left);
            draw_rectangle_color(room_width*0.05,game_bottom.y+room_height*0.025,
                                 room_width*0.4,room_height*0.975,
                                 c_olive,c_olive,c_olive,c_olive,true);
            draw_rectangle_color(room_width*0.6,game_bottom.y+room_height*0.025,
                                 room_width*0.95,room_height*0.975,
                                 c_olive,c_olive,c_olive,c_olive,true);
            draw_rectangle_color(room_width*0.4 - room_width*0.35*points/pwin,game_bottom.y + room_height*0.025,
                                 room_width*0.4,room_height*0.975,
                                 c_yellow,c_yellow,c_yellow,c_yellow,false);
            draw_rectangle_color(room_width*0.6,game_bottom.y + room_height*0.025,
                                 room_width*0.6 + room_width*0.35*points/pwin,room_height*0.975,
                                 c_yellow,c_yellow,c_yellow,c_yellow,false);
        }
        if game_state == 5//Victory restart
        {   draw_rectangle_color(0,0,room_width,game_story,c_aqua,c_aqua,c_aqua,c_aqua,false);
            if game_story &gt; room_height*0.88
            {   draw_set_halign(fa_center);
                draw_text_transformed(room_width/2,room_height*0.2,
                                      "TOWER THEFT HEIST#COMPLETED IN:#"
                                      +string_format(date_second_span(game_start,game_finish),3,0)
                                      +"#SECONDS",
                                      4,4,0);
                /*draw_text_transformed(room_width*0.15,room_height*0.82,"Press#to attempt a#better time",2,2,0);
                draw_circle_color(room_width/2,room_height*0.85,room_width*0.05,c_white,c_white,true);
                draw_circle_color(room_width/2,room_height*0.85,room_width*0.05*game_select/40,c_white,c_white,false);
                draw_text_transformed(room_width*0.7,room_height*0.82,"Hold#to end the game#as a winner",2,2,0);*/
                draw_text_transformed(room_width/2,room_height*0.6,"Press to attempt a better time",2,2,0);
                draw_circle_color(room_width/2,room_height*0.675,room_width*0.05,c_white,c_black,true);
                draw_circle_color(room_width/2,room_height*0.675,room_width*0.05*game_select/40,c_white,c_black,false);
                draw_text_transformed(room_width/2,room_height*0.725,"Hold to end the game as a winner",2,2,0);
                draw_set_halign(fa_left);
            }
            lives = 0;
        }
    }
    else//Intro
    {   switch game_story
        {   case 0: draw_rectangle_color(0,0,room_width,room_height,0,0,0,0,false);
                    if lives
                    {   game_lose = choose("I can do this!#Just try harder!",
                                           "Barrels that have been attacked
                                           #won't damage the machine, but
                                           #will leave gunk on the wall that
                                           #will disallow clinging onto walls.",
                                           "Barrels that are attacked will
                                           #destroy any other resources that
                                           #they come into contact with.",
                                           "Time your attack just before touching
                                           #the barrel to be successful, you get
                                           #only one shot per leap, but regain
                                           #it if you get the hit.",
                                           "A scientist can only throw a barrel once,
                                           #so watch their warning sign when
                                           #they are about to act, though they
                                           #can't do anything if there are
                                           #4 barrels already out.",
                                           "After getting hit or sustaining
                                           #too much toxic, you'll spin out
                                           #and have only a second of
                                           #invincibility.",
                                           "It takes 2 hits before you are
                                           #taken down, and the more often
                                           #you spin out, the harder it is
                                           #to mash out of it.",
                                           "Not letting the machine get hit by
                                           #barrels over time will speed it up.",
                                           "Bullets will leave gunk on walls,
                                           #but, such as them, can never
                                           #finish you off.",
                                           "The death beam is an instant kill move.",
                                           "If stuck, make sure to let it shoot
                                           #itself at its red foot.",
                                           "Except when purged, gaining a mutagen
                                           #will increase the chance of gaining
                                           #another mutagen the next time.",
                                           "Make sure to read keywords within
                                           #the pamphlet to understand resistance
                                           #against obstacles, movements,
                                           #attacks, and dangers.",
                                           "That last attempt was failure
                                           #number "+string(lives)+"...");
                        lives *= -1;
                    }
                    else if lives == 0
                        game_lose = "GAT";
                    if game_lose == "GAT"
                        draw_text_transformed_color(room_width*0.08,room_height*0.1,
                                                    game_lose,
                                                    3,3,0,
                                                    c_lime,c_lime,c_lime,c_lime,1);
                    else
                        draw_text_transformed_color(room_width*0.08,room_height*0.1,
                                                    game_lose,
                                                    2.3,2.3,-1,
                                                    c_white,c_white,c_white,c_white,1);
                    break;
            case 1: for (var i=0;i&lt;=1;i++)
                        draw_text_transformed_color(room_width*0.08+16*i,room_height*0.1-16*i,
                                                    "Yes, my name is of no importance
                                                    #right now, I am just a
                                                    #GRAND THIEF (and acrobat),
                                                    #here to steal this entire building,
                                                    #with this machine that I
                                                    #just so happen to have, of course,
                                                    #for these sort of jobs, were I
                                                    #heist big things, like this...",
                                                    2.3,2.3,-1,
                                                    merge_color(0,-1,i),merge_color(0,-1,i),
                                                    merge_color(0,-1,i),merge_color(0,-1,i),1);
                    break;
            case 2: for (i=0;i&lt;=1;i++)
                        draw_text_transformed_color(room_width*0.08+16*i,room_height*0.1-16*i,
                                                    "Enough rambling, I'll use this machine
                                                    #to eat things up and take everyting
                                                    #with me, though speeding it up will
                                                    #cause me to fly all over the place,
                                                    #though I can handle my self with my
                                                    #swift attacks midair, to keep myself
                                                    #and the machine safe from what those
                                                    #pesky scientists will throw at us.",
                                                    2.3,2.3,-1,
                                                    merge_color(0,-1,i),merge_color(0,-1,i),
                                                    merge_color(0,-1,i),merge_color(0,-1,i),1);
                    break;
            case 3: for (i=0;i&lt;=1;i++)
                        draw_text_transformed_color(room_width*0.08+16*i,room_height*0.1-16*i,
                                                    "But, my attacks won't work on:
                                                    #Bullets, big machines and such,
                                                    #may work on turrets if I try
                                                    #hard enough.
                                                    #So yeah, try focusing on hitting
                                                    #those toxic barrels to keep the
                                                    #machine safe, I hear weird things will
                                                    #happen to me if I touch them to much ;)",
                                                    2.3,2.3,-1,
                                                    merge_color(0,-1,i),merge_color(0,-1,i),
                                                    merge_color(0,-1,i),merge_color(0,-1,i),1);
                    break;
            case 4: for (i=0;i&lt;=1;i++)
                        draw_text_transformed_color(room_width*0.08+16*i,room_height*0.1-16*i,
                                                    "Speaking of which, here's a safety
                                                    #pamphlet that I found.
                                                    #RED: a vulnerable entity that
                                                    #burns away things before it.
                                                    #GREEN: a slow, unstable entity that
                                                    #needs energy to sustain itself.
                                                    #BLUE: an entity that holds and releases
                                                    #to bounce midair and reflect harm.",
                                                    2.3,2.3,-1,
                                                    merge_color(0,-1,i),merge_color(0,-1,i),
                                                    merge_color(0,-1,i),merge_color(0,-1,i),1);
                    break;
            case 5: for (i=0;i&lt;=1;i++)
                        draw_text_transformed_color(room_width*0.08+16*i,room_height*0.1-16*i,
                                                    "CYAN: a resistant entity that
                                                    #moves at blinding speed.
                                                    #MAGENTA: a dangerous entity that
                                                    #only wishes to replicate itself.
                                                    #YELLOW: a floating entity that
                                                    #purges itself from all harm.
                                                    #And remember that if you are in
                                                    #immediate threat, just mash it out!",
                                                    2.3,2.3,-1,
                                                    merge_color(0,-1,i),merge_color(0,-1,i),
                                                    merge_color(0,-1,i),merge_color(0,-1,i),1);
                    break;
            case 6: for (i=0;i&lt;=1;i++)
                        draw_text_transformed_color(room_width*0.08+16*i,room_height*0.1-16*i,
                                                    "
                                                    #
                                                    #
                                                    #So let's get started!
                                                    #
                                                    #
                                                    #
                                                    #",
                                                    2.3,2.3,-1,
                                                    merge_color(0,-1,i),merge_color(0,-1,i),
                                                    merge_color(0,-1,i),merge_color(0,-1,i),1);
                    break;
        }//Story restart
        draw_text_transformed_color(room_width*0.15,room_height*0.82,"Press#to continue",2,2,0,
                                    c_white,c_white,c_white,c_white,1);
        draw_circle_color(room_width/2,room_height*0.85,room_width*0.05,c_white,c_white,true);
        draw_circle_color(room_width/2,room_height*0.85,room_width*0.05*game_select/40,c_white,c_white,false);
        draw_text_transformed_color(room_width*0.7,room_height*0.82,"Hold#to start",2,2,0,
                                    c_white,c_white,c_white,c_white,1);
    }
    if debug_mode
        draw_text_transformed(room_width*0.85,room_height*0.92,
                              string(view_wport[0])+','+string(view_hport[0])
                              +"#fps:"+string(fps_real)
                              /*+"#toxic:"+string(me.mutagen[0])
                              +"#resist:"+string(me.resist)
                              +"#stun:"+string(me.stun)
                              +"#r:"+string(me.mutagen[1])
                              +"#g:"+string(me.mutagen[2])
                              +"#b:"+string(me.mutagen[3])
                              +"#c:"+string(me.mutagen[4])
                              +"#m:"+string(me.mutagen[5])
                              +"#y:"+string(me.mutagen[6])
                              +"#score:"+string(points)*/,
                              1,1,0);
}
else if room == title_screen//Title
{   draw_set_halign(fa_center);
    if game_start &lt; room_height*0.1
    {   draw_text_transformed(room_width/2,room_height*0.3,
                              "Hold to Start",
                              3,3,0);
    }
    draw_text_transformed_color(room_width/2,room_height*1.15 - game_start,
                                "ONE##THEFT##CLIMB",
                                3,3,0,c_white,c_white,c_white,c_white,1);
    draw_set_halign(fa_left);
}
else//Defeat restart
{   draw_text_transformed_color(room_width*0.15,room_height*0.82,"Press#to retry",2,2,0,
                                c_white,c_white,c_white,c_white,1);
    draw_circle_color(room_width/2,room_height*0.85,room_width*0.05,c_white,c_white,true);
    draw_circle_color(room_width/2,room_height*0.85,room_width*0.05*game_select/40,c_white,c_white,false);
    draw_text_transformed_color(room_width*0.7,room_height*0.82,"Hold#to quit",2,2,0,
                                c_white,c_white,c_white,c_white,1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
