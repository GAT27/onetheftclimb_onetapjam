<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SETUP

device_mouse_dbclick_enable(false);
//draw_enable_alphablend(false);
//display_reset(2,false);//??????
application_surface_enable(true);//???????????????????
//draw_clear_alpha(0,0);
show_debug_overlay(true);
draw_set_font(fgothic);
randomize();
globalvar one_p;
globalvar one_h;
globalvar one_r;
game_state = 0;
game_select = 0;
game_start = 0;
game_boss = 0;
one_p = 0;
one_h = 0;
one_r = 0;
pwin = 10//3000;
points = 0;
health = 100;
rate = 1;

var w = min(display_get_width(),display_get_height());
var h = max(display_get_height(),display_get_width());
if os_type != os_android
{   var r = w/h;
    h = w*0.95;
    w *= r*0.95;
    window_set_size(w,h);
}
surface_resize(application_surface,w,h);//????????????????
application_surface_enable(false);//????
view_wport[0] = w;
view_hport[0] = h;

me = instance_create(room_width/2,room_height*0.85,jumper);
if room == title_screen
    with me instance_destroy();
with instance_create(-1,0,side_wall)
{   image_xscale = 1;
    image_yscale = room_height;
}
with instance_create(room_width,0,side_wall)
{   image_xscale = 1;
    image_yscale = room_height;
}
with instance_create(0,-1,top_wall)
{   image_xscale = room_width;
    image_yscale = 1;
}
with instance_create(0,room_height*0.9,bot_wall)
{   image_xscale = room_width;
    image_yscale = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ONE BUTTON

/*one_p = (device_mouse_check_button(0,mb_left) xor keyboard_check(vk_space));
one_h = (device_mouse_check_button_pressed(0,mb_left) xor keyboard_check_pressed(vk_space));
one_r = (device_mouse_check_button_released(0,mb_left) xor keyboard_check_released(vk_space));*/
if os_type == os_android
{   one_p = device_mouse_check_button_pressed(0,mb_left);
    one_h = device_mouse_check_button(0,mb_left);
    one_r = device_mouse_check_button_released(0,mb_left);
}
else
{   one_p = keyboard_check_pressed(vk_space);
    one_h = keyboard_check(vk_space);
    one_r = keyboard_check_released(vk_space);
}

switch game_state
{   case 0: if room == main_screen
            {   if one_h
                {   if game_select &lt; 59
                        game_select += 1;
                }
                else
                    game_select = 0;
                if one_r
                    test=1
                if game_select == 59
                {   game_select = 0;
                    game_state++;
                }
                one_p = 0;
                one_h = 0;
                one_r = 0;
            }
            else if one_p
                room_goto_next();
            break;
    case 1: me.a_angle = 135;
            one_h = 1;
            game_state++;
            break;
    case 2: one_p = 0;
            one_h = 0;
            one_r = 0;
            if me.walled == 1
            {   game_start = date_current_datetime();
                game_state++;
            }
            break;
    case 3: var i,hit,wspeed = rate * (2 + one_h*4);
            points = max(points+wspeed*2/room_speed,0);
            if points &gt;= pwin//BOSS
            {   points = pwin;
                if !game_boss
                {   game_boss++;
                    instance_create(room_width/2,room_height*-0.2,boss);
                    with instance_create(0,room_height*-0.2,lgrip)
                        wobb = 0;
                    with instance_create(room_width,room_height*-0.2,rgrip)
                        wobb = 0;
                    with instance_create(room_width/2,0,warning)
                    {   timer = 3;
                        image_xscale = 4;
                        image_yscale = 4;
                        image_blend = c_yellow;
                    }
                }
            }
            if health &lt;= 0//DEATH
                me.gravity = 2;
            else
                health = min(health+2/room_speed,100);
            
            //Object controls
            if !game_boss and (random(1)&lt;=0.01)
            {   with instance_create(0,room_height*-0.2,spawner)
                {   image_xscale = room_width;
                    image_yscale = 32;
                    image_blend = c_aqua;
                    if random(1) &lt; 0.1*3*other.points/other.pwin
                        with instance_create(irandom_range(room_width*0.2,room_width*0.8),y,hotjunk)
                            with instance_create(x,0,warning)
                            {   timer = 2;
                                image_xscale = 2;
                                image_yscale = 2;
                                image_blend = c_red;
                            }
                    else if random(1) &lt; 0.1*3/2*other.points/other.pwin
                        with instance_create(irandom_range(room_width*0.2,room_width*0.8),y,turret)
                        {   timer = 4;
                            damage = 0;
                            with instance_create(x,0,warning)
                            {   timer = 2;
                                image_xscale = 2;
                                image_yscale = 2;
                                image_blend = c_aqua;
                            }
                        }
                }
            }
            with jumper
            {   if walled != 0
                    y += wspeed;
            }
            with spawner
            {   y += wspeed;
                if y &gt; room_height
                    instance_destroy();
                else if (y&gt;0) and (y&lt;room_height*0.7) and (random(1)&lt;=0.002)
                    with instance_create(irandom_range(room_width*0.2,room_width*0.8),y,labcoat)
                    {   hspeed = choose(2,-2);
                        timer = -1;
                    }
            }
            with labcoat
            {   y += wspeed;
                image_blend = -1;
                hit = XY_COLLISION(bot_wall,2);
                if hit[0]
                {   other.points += 20;
                    other.rate += 0.02;
                    instance_destroy();
                }
                else if (x&lt;0) or (x&gt;room_width)
                    instance_destroy();
                else if timer == -1
                {   if (x&gt;room_width*0.1) and (x&lt;room_width*0.9)
                    and (y&lt;room_height*0.7) and (random(1)&lt;=0.002)
                        timer = 3;
                }
                else
                {   timer -= 1/room_speed;
                    image_blend = c_orange;
                    if !timer
                    {   if instance_number(waste) &lt; 4
                        with instance_create(x,y,waste)
                        {   hspeed = random_range(-10,10);
                            vspeed = random_range(-12,-5);
                            image_xscale = 3;
                            image_yscale = 3;
                            gravity = 0.05;
                            shot = 0;
                        }
                        timer = -1;
                    }
                }
            }
            with waste
            {   if !machine.game_boss
                {   hit = XY_COLLISION(top_wall,2);
                    if hit[0]
                        vspeed *= -1;
                }
                hit = XY_COLLISION(side_wall,1);
                if hit[0]
                {   if !shot
                        hspeed *= -1;
                    else
                    {   instance_create(hit[1].x,y,gunk);
                        instance_destroy();
                    }
                }
                hit = XY_COLLISION(bot_wall,2);
                if hit[0]
                {   if !machine.game_boss
                    {   health -= 20;
                        other.points -= 100;
                        other.rate = max(other.rate-0.5,1);
                    }
                    instance_destroy();
                }
                
                if shot
                {   hit = XY_COLLISION(waste,0);
                    if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] instance_destroy();
                    hit = XY_COLLISION(jumper,0);
                    if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] if hit[i] != machine.me
                            instance_destroy();
                    hit = XY_COLLISION(hotjunk,0);
                    if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] instance_destroy();
                    hit = XY_COLLISION(turret,0);
                    if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] instance_destroy();
                }
            }
            with gunk
            {   y += wspeed;
                image_xscale = 3;
                hit = XY_COLLISION(bot_wall,2);
                if hit[0]
                {   other.points += 10;
                    instance_destroy();
                }
                hit = XY_COLLISION(rgrip,2);
                if hit[0] and boss.placement and hit[1].wobb
                {   instance_deactivate_region(x-64,y-room_height*0.25,
                                               128,room_height*0.5,false,true);
                    with gunk instance_destroy();
                    instance_activate_all();
                    boss.damage++;
                }
            }
            with hotjunk
            {   y += wspeed;
                hit = XY_COLLISION(bot_wall,2);
                if hit[0]
                {   other.points += 100;
                    other.rate += 0.2;
                    instance_destroy();
                }
            }
            with turret
            {   y += wspeed;
                timer -= 1/room_speed;
                if damage &gt;= 2
                    gravity = 0.2;
                else if !timer
                {   with instance_create(x,y,bullet)
                        motion_add(point_direction(x,y,machine.me.x,machine.me.y),20);
                    timer = 4;
                }
                hit = XY_COLLISION(bot_wall,2);
                if hit[0]
                {   other.points += 100;
                    instance_destroy();
                }
            }
            with bullet
            {   hit = XY_COLLISION(top_wall,2);
                if hit[0]
                    instance_destroy();
                hit = XY_COLLISION(side_wall,1);
                if hit[0]
                {   instance_create(hit[1].x,y,gunk);
                    instance_destroy();
                }
                hit = XY_COLLISION(bot_wall,2);
                if hit[0]
                    instance_destroy();
                
                hit = XY_COLLISION(waste,0);
                if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                    with hit[i] instance_destroy();
                hit = XY_COLLISION(jumper,0);
                if hit[0] for (i=1;i&lt;array_length_1d(hit);i++)
                    with hit[i] if hit[i] != machine.me
                        instance_destroy();
                hit = XY_COLLISION(hotjunk,0);
                if hit[0]
                {   for (i=1;i&lt;array_length_1d(hit);i++)
                        with hit[i] instance_destroy();
                    instance_destroy();
                }
            }
            with warning
            {   if !timer
                    instance_destroy();
                else
                {   timer -= 1/room_speed;
                    image_alpha = timer/2;
                }
            }
            if game_boss == 1
            {   with boss
                {   y += wspeed*10;
                    if y &gt; room_height
                    {   other.game_boss++;
                        other.rate = 1;
                        
                        //x = room_width/2;
                        /*y = placement;
                        with lgrip
                        {   //x = room_width/2;
                            y = other.placement;
                        }
                        with rgrip
                        {   //x = room_width/2;
                            y = other.placement;
                        }*/
                        hspeed = irandom_range(15,30) * choose(1,-1);
                        vspeed = irandom_range(10,15) * choose(1,-1);
                        
                    }
                }
                with lgrip
                    y += wspeed*10;
                with rgrip
                    y += wspeed*10;
            }
            break;
    case 4: if one_h
            {   if game_select &lt; 59
                    game_select += 1;
            }
            else
                game_select = 0;
            if one_r
                room_restart();
            if game_select == 59
                game_end();
            one_p = 0;
            one_h = 0;
            one_r = 0;
            break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD

if instance_exists(me)
{   var green = me.mutagen[0]/100;
    draw_set_alpha(green);
    draw_rectangle_color(0,0,
                         room_width*0.05*green,room_height,
                         c_lime,c_lime,c_lime,c_lime,false);
    draw_rectangle_color(room_width*(1-0.05*green),0,
                         room_width,room_height,
                         c_lime,c_lime,c_lime,c_lime,false);
    draw_set_alpha(green/6);
    draw_rectangle_color(room_width*0.05*green,0,
                         room_width*(1-0.05*green),room_height,
                         c_lime,c_lime,c_lime,c_lime,false);
    draw_set_alpha(1);
    
    draw_circle_color(room_width/2,room_height*0.93,room_height*0.025,
                      merge_color(c_red,c_lime,health/100),
                      merge_color(c_red,c_lime,health/100),false);
    draw_set_halign(fa_center);
    draw_text_transformed(room_width/2,room_height*0.97,
                          string_format(date_second_span(game_start,date_current_datetime()),3,0),
                          2,2,0);
    draw_set_halign(fa_left);
    draw_rectangle_color(room_width*0.05,room_height*0.925,
                         room_width*0.4,room_height*0.975,
                         c_olive,c_olive,c_olive,c_olive,true);
    draw_rectangle_color(room_width*0.6,room_height*0.925,
                         room_width*0.95,room_height*0.975,
                         c_olive,c_olive,c_olive,c_olive,true);
    draw_rectangle_color(room_width*0.4 - room_width*0.35*points/pwin,room_height*0.925,
                         room_width*0.4,room_height*0.975,
                         c_yellow,c_yellow,c_yellow,c_yellow,false);
    draw_rectangle_color(room_width*0.6,room_height*0.925,
                         room_width*0.6 + room_width*0.35*points/pwin,room_height*0.975,
                         c_yellow,c_yellow,c_yellow,c_yellow,false);
    
    draw_text_transformed(room_width/2,room_height/2,
                          string(view_wport[0])+','+string(view_hport[0])
                          +'#'+string(fps_real)
                          +'#toxic:'+string(me.mutagen[0])
                          +'#resist:'+string(me.resist)
                          +'#stun:'+string(me.stun)
                          +'#r:'+string(me.mutagen[1])
                          +'#g:'+string(me.mutagen[2])
                          +'#b:'+string(me.mutagen[3])
                          +'#c:'+string(me.mutagen[4])
                          +'#m:'+string(me.mutagen[5])
                          +'#y:'+string(me.mutagen[6])
                          +'#score:'+string(points),
                          2,2,0);
}
else if room == title_screen
{   draw_set_halign(fa_center);
    draw_text_transformed(room_width/2,room_height*0.3,
                          "ONE##THEFT##CLIMB##Science Edition",
                          3,3,0);
    draw_set_halign(fa_left);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
